============================= test session starts ==============================
platform darwin -- Python 3.10.12, pytest-8.3.5, pluggy-1.5.0 -- /Users/mathieu/Documents/Alternance_IA/Projet_groupe/SecureApi/backend/.venv_backend/bin/python
cachedir: .pytest_cache
rootdir: /Users/mathieu/Documents/Alternance_IA/Projet_groupe/SecureApi/backend
plugins: anyio-4.9.0
collecting ... collected 9 items

tests/test_auth.py::test_get_user_by_email_found PASSED                  [ 11%]
tests/test_auth.py::test_get_user_by_email_not_found PASSED              [ 22%]
tests/test_auth.py::test_authenticate_user_success FAILED                [ 33%]
tests/test_auth.py::test_authenticate_user_wrong_password PASSED         [ 44%]
tests/test_auth.py::test_authenticate_user_not_found PASSED              [ 55%]
tests/test_auth.py::test_create_access_token PASSED                      [ 66%]
tests/test_auth.py::test_refresh_token_hashing PASSED                    [ 77%]
tests/test_auth.py::test_refresh_route_works FAILED                      [ 88%]
tests/test_auth.py::test_refresh_token_validity PASSED                   [100%]

=================================== FAILURES ===================================
________________________ test_authenticate_user_success ________________________

db = <sqlalchemy.orm.session.Session object at 0x107fa1330>
test_user = <modules.api.users.models.User object at 0x107fa1540>

    def test_authenticate_user_success(db, test_user):
        user = authenticate_user(db, "test@example.com", "testpass123")
>       assert user is not False
E       assert False is not False

tests/test_auth.py:104: AssertionError
----------------------------- Captured stderr call -----------------------------
2025-04-16 16:23:48 | modules.api.auth.functions | INFO | Authentification de l'utilisateur...
2025-04-16 16:23:48 | modules.api.auth.functions | INFO | Utilisateur non trouv√©.
___________________________ test_refresh_route_works ___________________________

self = <sqlalchemy.engine.base.Connection object at 0x1080a8f40>
dialect = <sqlalchemy.dialects.sqlite.pysqlite.SQLiteDialect_pysqlite object at 0x107f57d90>
context = <sqlalchemy.dialects.sqlite.base.SQLiteExecutionContext object at 0x1080a8fa0>
statement = <sqlalchemy.dialects.sqlite.base.SQLiteCompiler object at 0x1080c1b70>
parameters = [('5607e144e3f2fefd3695f2a49d55a13124e2c2f06431a04ec3fe365dbc8f5981', 1, 0)]

    def _exec_single_context(
        self,
        dialect: Dialect,
        context: ExecutionContext,
        statement: Union[str, Compiled],
        parameters: Optional[_AnyMultiExecuteParams],
    ) -> CursorResult[Any]:
        """continue the _execute_context() method for a single DBAPI
        cursor.execute() or cursor.executemany() call.
    
        """
        if dialect.bind_typing is BindTyping.SETINPUTSIZES:
            generic_setinputsizes = context._prepare_set_input_sizes()
    
            if generic_setinputsizes:
                try:
                    dialect.do_set_input_sizes(
                        context.cursor, generic_setinputsizes, context
                    )
                except BaseException as e:
                    self._handle_dbapi_exception(
                        e, str(statement), parameters, None, context
                    )
    
        cursor, str_statement, parameters = (
            context.cursor,
            context.statement,
            context.parameters,
        )
    
        effective_parameters: Optional[_AnyExecuteParams]
    
        if not context.executemany:
            effective_parameters = parameters[0]
        else:
            effective_parameters = parameters
    
        if self._has_events or self.engine._has_events:
            for fn in self.dispatch.before_cursor_execute:
                str_statement, effective_parameters = fn(
                    self,
                    cursor,
                    str_statement,
                    effective_parameters,
                    context,
                    context.executemany,
                )
    
        if self._echo:
            self._log_info(str_statement)
    
            stats = context._get_cache_stats()
    
            if not self.engine.hide_parameters:
                self._log_info(
                    "[%s] %r",
                    stats,
                    sql_util._repr_params(
                        effective_parameters,
                        batches=10,
                        ismulti=context.executemany,
                    ),
                )
            else:
                self._log_info(
                    "[%s] [SQL parameters hidden due to hide_parameters=True]",
                    stats,
                )
    
        evt_handled: bool = False
        try:
            if context.execute_style is ExecuteStyle.EXECUTEMANY:
                effective_parameters = cast(
                    "_CoreMultiExecuteParams", effective_parameters
                )
                if self.dialect._has_events:
                    for fn in self.dialect.dispatch.do_executemany:
                        if fn(
                            cursor,
                            str_statement,
                            effective_parameters,
                            context,
                        ):
                            evt_handled = True
                            break
                if not evt_handled:
                    self.dialect.do_executemany(
                        cursor,
                        str_statement,
                        effective_parameters,
                        context,
                    )
            elif not effective_parameters and context.no_parameters:
                if self.dialect._has_events:
                    for fn in self.dialect.dispatch.do_execute_no_params:
                        if fn(cursor, str_statement, context):
                            evt_handled = True
                            break
                if not evt_handled:
                    self.dialect.do_execute_no_params(
                        cursor, str_statement, context
                    )
            else:
                effective_parameters = cast(
                    "_CoreSingleExecuteParams", effective_parameters
                )
                if self.dialect._has_events:
                    for fn in self.dialect.dispatch.do_execute:
                        if fn(
                            cursor,
                            str_statement,
                            effective_parameters,
                            context,
                        ):
                            evt_handled = True
                            break
                if not evt_handled:
>                   self.dialect.do_execute(
                        cursor, str_statement, effective_parameters, context
                    )

.venv_backend/lib/python3.10/site-packages/sqlalchemy/engine/base.py:1964: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.pysqlite.SQLiteDialect_pysqlite object at 0x107f57d90>
cursor = <sqlite3.Cursor object at 0x108097040>
statement = 'SELECT refresh_tokens.id AS refresh_tokens_id, refresh_tokens.token AS refresh_tokens_token, refresh_tokens.user_id A...esh_tokens.revoked AS refresh_tokens_revoked \nFROM refresh_tokens \nWHERE refresh_tokens.token = ?\n LIMIT ? OFFSET ?'
parameters = ('5607e144e3f2fefd3695f2a49d55a13124e2c2f06431a04ec3fe365dbc8f5981', 1, 0)
context = <sqlalchemy.dialects.sqlite.base.SQLiteExecutionContext object at 0x1080a8fa0>

    def do_execute(self, cursor, statement, parameters, context=None):
>       cursor.execute(statement, parameters)
E       sqlite3.OperationalError: no such table: refresh_tokens

.venv_backend/lib/python3.10/site-packages/sqlalchemy/engine/default.py:945: OperationalError

The above exception was the direct cause of the following exception:

db = <sqlalchemy.orm.session.Session object at 0x1080c2b60>
client_with_override = <starlette.testclient.TestClient object at 0x1080c2350>

    def test_refresh_route_works(db, client_with_override):
        email = "testrefresh@example.com"
        user = create_test_user(db, email)
        old_refresh_token = create_access_token(
            data={"sub": email, "type": "refresh"},
            expires_delta=timedelta(days=7),
        )
        hashed_old = hash_token(old_refresh_token)
        expires_at = datetime.now(timezone.utc) + timedelta(days=7)
        store_refresh_token(db, user.id, hashed_old, expires_at)
    
>       response = client_with_override.post(
            "/auth/refresh",
            headers={"Authorization": f"Bearer {old_refresh_token}"},
        )

tests/test_auth.py:166: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.venv_backend/lib/python3.10/site-packages/starlette/testclient.py:538: in post
    return super().post(
.venv_backend/lib/python3.10/site-packages/httpx/_client.py:1144: in post
    return self.request(
.venv_backend/lib/python3.10/site-packages/starlette/testclient.py:437: in request
    return super().request(
.venv_backend/lib/python3.10/site-packages/httpx/_client.py:825: in request
    return self.send(request, auth=auth, follow_redirects=follow_redirects)
.venv_backend/lib/python3.10/site-packages/httpx/_client.py:914: in send
    response = self._send_handling_auth(
.venv_backend/lib/python3.10/site-packages/httpx/_client.py:942: in _send_handling_auth
    response = self._send_handling_redirects(
.venv_backend/lib/python3.10/site-packages/httpx/_client.py:979: in _send_handling_redirects
    response = self._send_single_request(request)
.venv_backend/lib/python3.10/site-packages/httpx/_client.py:1014: in _send_single_request
    response = transport.handle_request(request)
.venv_backend/lib/python3.10/site-packages/starlette/testclient.py:340: in handle_request
    raise exc
.venv_backend/lib/python3.10/site-packages/starlette/testclient.py:337: in handle_request
    portal.call(self.app, scope, receive, send)
.venv_backend/lib/python3.10/site-packages/anyio/from_thread.py:290: in call
    return cast(T_Retval, self.start_task_soon(func, *args).result())
/Users/mathieu/.pyenv/versions/3.10.12/lib/python3.10/concurrent/futures/_base.py:458: in result
    return self.__get_result()
/Users/mathieu/.pyenv/versions/3.10.12/lib/python3.10/concurrent/futures/_base.py:403: in __get_result
    raise self._exception
.venv_backend/lib/python3.10/site-packages/anyio/from_thread.py:221: in _call_func
    retval = await retval_or_awaitable
.venv_backend/lib/python3.10/site-packages/fastapi/applications.py:1054: in __call__
    await super().__call__(scope, receive, send)
.venv_backend/lib/python3.10/site-packages/starlette/applications.py:112: in __call__
    await self.middleware_stack(scope, receive, send)
.venv_backend/lib/python3.10/site-packages/starlette/middleware/errors.py:187: in __call__
    raise exc
.venv_backend/lib/python3.10/site-packages/starlette/middleware/errors.py:165: in __call__
    await self.app(scope, receive, _send)
.venv_backend/lib/python3.10/site-packages/starlette/middleware/cors.py:85: in __call__
    await self.app(scope, receive, send)
.venv_backend/lib/python3.10/site-packages/starlette/middleware/exceptions.py:62: in __call__
    await wrap_app_handling_exceptions(self.app, conn)(scope, receive, send)
.venv_backend/lib/python3.10/site-packages/starlette/_exception_handler.py:53: in wrapped_app
    raise exc
.venv_backend/lib/python3.10/site-packages/starlette/_exception_handler.py:42: in wrapped_app
    await app(scope, receive, sender)
.venv_backend/lib/python3.10/site-packages/starlette/routing.py:714: in __call__
    await self.middleware_stack(scope, receive, send)
.venv_backend/lib/python3.10/site-packages/starlette/routing.py:734: in app
    await route.handle(scope, receive, send)
.venv_backend/lib/python3.10/site-packages/starlette/routing.py:288: in handle
    await self.app(scope, receive, send)
.venv_backend/lib/python3.10/site-packages/starlette/routing.py:76: in app
    await wrap_app_handling_exceptions(app, request)(scope, receive, send)
.venv_backend/lib/python3.10/site-packages/starlette/_exception_handler.py:53: in wrapped_app
    raise exc
.venv_backend/lib/python3.10/site-packages/starlette/_exception_handler.py:42: in wrapped_app
    await app(scope, receive, sender)
.venv_backend/lib/python3.10/site-packages/starlette/routing.py:73: in app
    response = await f(request)
.venv_backend/lib/python3.10/site-packages/fastapi/routing.py:301: in app
    raw_response = await run_endpoint_function(
.venv_backend/lib/python3.10/site-packages/fastapi/routing.py:214: in run_endpoint_function
    return await run_in_threadpool(dependant.call, **values)
.venv_backend/lib/python3.10/site-packages/starlette/concurrency.py:37: in run_in_threadpool
    return await anyio.to_thread.run_sync(func)
.venv_backend/lib/python3.10/site-packages/anyio/to_thread.py:56: in run_sync
    return await get_async_backend().run_sync_in_worker_thread(
.venv_backend/lib/python3.10/site-packages/anyio/_backends/_asyncio.py:2470: in run_sync_in_worker_thread
    return await future
.venv_backend/lib/python3.10/site-packages/anyio/_backends/_asyncio.py:967: in run
    result = context.run(func, *args)
modules/api/auth/routes.py:113: in refresh_token
    refresh_token_db = find_refresh_token(db, hashed_token)
modules/api/auth/functions.py:68: in find_refresh_token
    db.query(RefreshToken).filter(RefreshToken.token == provided_token).first()
.venv_backend/lib/python3.10/site-packages/sqlalchemy/orm/query.py:2759: in first
    return self.limit(1)._iter().first()  # type: ignore
.venv_backend/lib/python3.10/site-packages/sqlalchemy/orm/query.py:2858: in _iter
    result: Union[ScalarResult[_T], Result[_T]] = self.session.execute(
.venv_backend/lib/python3.10/site-packages/sqlalchemy/orm/session.py:2365: in execute
    return self._execute_internal(
.venv_backend/lib/python3.10/site-packages/sqlalchemy/orm/session.py:2251: in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
.venv_backend/lib/python3.10/site-packages/sqlalchemy/orm/context.py:306: in orm_execute_statement
    result = conn.execute(
.venv_backend/lib/python3.10/site-packages/sqlalchemy/engine/base.py:1416: in execute
    return meth(
.venv_backend/lib/python3.10/site-packages/sqlalchemy/sql/elements.py:523: in _execute_on_connection
    return connection._execute_clauseelement(
.venv_backend/lib/python3.10/site-packages/sqlalchemy/engine/base.py:1638: in _execute_clauseelement
    ret = self._execute_context(
.venv_backend/lib/python3.10/site-packages/sqlalchemy/engine/base.py:1843: in _execute_context
    return self._exec_single_context(
.venv_backend/lib/python3.10/site-packages/sqlalchemy/engine/base.py:1983: in _exec_single_context
    self._handle_dbapi_exception(
.venv_backend/lib/python3.10/site-packages/sqlalchemy/engine/base.py:2352: in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
.venv_backend/lib/python3.10/site-packages/sqlalchemy/engine/base.py:1964: in _exec_single_context
    self.dialect.do_execute(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.pysqlite.SQLiteDialect_pysqlite object at 0x107f57d90>
cursor = <sqlite3.Cursor object at 0x108097040>
statement = 'SELECT refresh_tokens.id AS refresh_tokens_id, refresh_tokens.token AS refresh_tokens_token, refresh_tokens.user_id A...esh_tokens.revoked AS refresh_tokens_revoked \nFROM refresh_tokens \nWHERE refresh_tokens.token = ?\n LIMIT ? OFFSET ?'
parameters = ('5607e144e3f2fefd3695f2a49d55a13124e2c2f06431a04ec3fe365dbc8f5981', 1, 0)
context = <sqlalchemy.dialects.sqlite.base.SQLiteExecutionContext object at 0x1080a8fa0>

    def do_execute(self, cursor, statement, parameters, context=None):
>       cursor.execute(statement, parameters)
E       sqlalchemy.exc.OperationalError: (sqlite3.OperationalError) no such table: refresh_tokens
E       [SQL: SELECT refresh_tokens.id AS refresh_tokens_id, refresh_tokens.token AS refresh_tokens_token, refresh_tokens.user_id AS refresh_tokens_user_id, refresh_tokens.expires_at AS refresh_tokens_expires_at, refresh_tokens.created_at AS refresh_tokens_created_at, refresh_tokens.revoked AS refresh_tokens_revoked 
E       FROM refresh_tokens 
E       WHERE refresh_tokens.token = ?
E        LIMIT ? OFFSET ?]
E       [parameters: ('5607e144e3f2fefd3695f2a49d55a13124e2c2f06431a04ec3fe365dbc8f5981', 1, 0)]
E       (Background on this error at: https://sqlalche.me/e/20/e3q8)

.venv_backend/lib/python3.10/site-packages/sqlalchemy/engine/default.py:945: OperationalError
----------------------------- Captured stderr call -----------------------------
2025-04-16 16:23:49 | modules.api.auth.functions | INFO | Token d'acc√®s cr√©√© avec expiration √† : 2025-04-23 14:23:49.066345+00:00
=============================== warnings summary ===============================
.venv_backend/lib/python3.10/site-packages/pydantic/_internal/_config.py:323
  /Users/mathieu/Documents/Alternance_IA/Projet_groupe/SecureApi/backend/.venv_backend/lib/python3.10/site-packages/pydantic/_internal/_config.py:323: PydanticDeprecatedSince20: Support for class-based `config` is deprecated, use ConfigDict instead. Deprecated in Pydantic V2.0 to be removed in V3.0. See Pydantic V2 Migration Guide at https://errors.pydantic.dev/2.11/migration/
    warnings.warn(DEPRECATION_MESSAGE, DeprecationWarning)

-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html
=========================== short test summary info ============================
FAILED tests/test_auth.py::test_authenticate_user_success - assert False is n...
FAILED tests/test_auth.py::test_refresh_route_works - sqlalchemy.exc.Operatio...
==================== 2 failed, 7 passed, 1 warning in 1.64s ====================
